* About

NACE code finder.

* Objectives
- Stay completely out of the NPM land. Components should be nothing but pure Web Components.
- Use any Cherry/Squint-compatible package.
    - That means no cljs.spec.alpha.
    - Can we compile bm-data with Cherry? (No multimethods unfortunately.)
        - If not, include as-is (compiled bundle), that's OK too, although being able to just copy the code rather than the bundle would be preferable.

** Async
- First load layout, so it shows fast, then nace-finder/current-page (load both via defer).
- Styles via <link>, so we don't block on styling and keep the JS bundles small. Load the UI first.

** Custom tangling
- Stay as close to the browser as possible.
- Allow for minify/uglify (with --production).
- Allow transpile with Cherry/Squint (or anything else for the matter).

* Usage
** Development
- Run ~watch.clj~ ([[./.env/bin/watch.clj]]) in order to compile changed ~.clj[sc]~ files.
- And any web server, for instance: ~(cd public; python3 -m http.server 8000)~.

** Inspect mode
- Add ~?dev~ to your URL in order to see the app in the inspect mode.

*** Features
- Screen info in top right corner.
- Shows extra data (if available) in the modal.

** Production build
As the only dependency is Cherry itself (which comes minified), there's no need for any production build.

Current size (as of 16/5/2023):

- Custom code (~public/**/*.{js,css,html}~) only ~84 kb~.
- Cherry (~public/js/cljs_core.js~) ~332 kb~ (minified).
- Data (~public/workers/autocomplete/data.json~) ~812 kb~ (async).

** Hosting
- [[https://rococo-panda-597db4.netlify.app/][Deployed app]].
- [[https://app.netlify.com/sites/rococo-panda-597db4/overview][Netlify app dashboard]].

* Roadmap
** TODO Move into Org files in bm-core
Then compile to here.

Is it userful for this purpose?

It definitely adds complexity (CI: compile -> commit & push to /this/ repo from the master one).

It'd make it easier to share the codebase though with something like ~:tangle copy~.
